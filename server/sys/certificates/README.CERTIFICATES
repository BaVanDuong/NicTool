# README.CERTIFICATES -- certificate support directory
#
# NicTool v2.00-rc1 Copyright 2001 Damon Edwards, Abe Shelton & Greg Schueler
# NicTool v2.01 Copyright 2004 The Network People, Inc.
#
# NicTool is free software; you can redistribute it and/or modify it under 
# the terms of the Affero General Public License as published by Affero, 
# Inc.; either version 1 of the License, or any later version.
#
# NicTool is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
# or FITNESS FOR A PARTICULAR PURPOSE. See the Affero GPL for details.
#
# You should have received a copy of the Affero General Public License
# along with this program; if not, write to Affero Inc., 521 Third St,
# Suite 225, San Francisco, CA 94107, USA
#


Creating Certificates for use with NicToolServer and NicToolClient HTTPS
client authentication:

Your server and client certificates need to be signed by a Root CA (Certificate
Authority), this is what makes them trustworthy.  If you don't have a CA 
certificate at your site you can create one for your own use.  This CA 
certificate would only be acceptable to you, since nobody else would trust it. 
If you want a CA certificate that is trusted by other people, you need to get 
it signed by Thawte or VeriSign.  It may be easiest to create your own 
specifically for NicTool.  

Once you have a CA certificate, you need to generate the public/private keys 
and the certificates for the client and server, and then get the certificates 
signed by the CA.  You will keep your server certificate and key with your
server, and hand out client certificates and keys.

(If you have a CA of your own, skip the first step and use your CA certificate 
to sign the client and server certificates in the next steps. You will have to 
figure out how to do so yourself.) 

1. Generating a Root CA Certificate.
 
	# make ca-certificate	

This will prompt you for a passphrase for the encrypted private key, and again 
to verify.  
This passphrase is for the private key of your Root CA, so don't forget it!

Once it has created the key, it will create the certificate with that key, so it
will need the passphrase again.

If you enter the passphrase incorrectly simply make ca-certificate again and it
will start where you left off.

The CA certificate and key will be created as:
	CA/ca.crt 		-- the certificate
	CA/private/ca.key 	-- the private key

Note that once created, you can't overwrite the root CA cert or key using the 
makefile.  This is to protect you.
If you screwed up the information for the certificate, simply delete CA/ca.crt
and make ca-certificate again.


2.  Creating the Server Certificate.

	# make server-certificate SERVER_NAME=www.my.dom	

This will create a key for the server, and then the certificate, signed by the
CA.
You will need to enter the CA passphrase again to sign the certificate.
If you cancel this will leave a blank www.my.dom.crt and the original CSR
 www.my.dom.csr.
If the information for the CSR was wrong, delete it and try again.  You will 
have to delete the empty cert file as well.

Once done this will create the files
	www.my.dom.crt	-- the certificate file
	www.my.dom.key	-- the private key file
	www.my.dom.csr	-- the CSR (Certificate Signing Request) file


3. Creating the client certificate.

	# make client-certificate CLIENT_NAME=somename

The process is the same as making a server certificate.


4.  Using the certificates with Apache/mod_ssl

For the rest of this file, the apache base directory is assumed to be 
/usr/local/apache
Substitute your apache base dir if different.


A. Moving files:

The directory "CA" contains the root CA certificate, key, and database.
You will want to move this directory to someplace private, such as the apache 
conf directory.

	# mv CA /usr/local/apache/conf/ssl.ca

Also, you will want to move your server.key, .crt, and .csr files to the 
ssl.* directories in your apache/conf directory.  I'm assuming your server is 
named "server", and all the appropriate files are "server.crt", "server.key", 
etc.

	# mv server.crt /usr/local/apache/conf/ssl.crt/
	# mv server.csr /usr/local/apache/conf/ssl.csr/
	# mv server.key /usr/local/apache/conf/ssl.key/

re-link the certificates in ssl.crt/:
	
	# cd /usr/local/apache/conf/ssl.crt/
	# make

This will create symlinks to the crt files based on their hash. mod_ssl 
requires that all certificates be linked in this way.  Anytime you add or 
change a certificate here, type make again.

Make sure that your CA files and server files are readable by the user apache
will run as (possibly "apache"), and no one else.


B. Create the CA certificate bundle file:


In order to use client authentication with your server and client certificates,
your CA which signed the certificates has to be known to mod_ssl.

Apache+mod_ssl comes with a CA bundle file in apache/conf/ssl.crt/ca-bundle.crt
Which contains a number of CA certificates that are trusted.  You can either 
append your CA certificate to this file, or create a new bundle file that you 
put your certificate in. Your crt file is in PEM format which is a text format
which can be simply appended to the bundle file.

First:
	# cd /usr/local/apache

To make a new file:
	
	# cat conf/ssl.ca/ca.crt >> conf/ssl.crt/ca-bundle-server.crt

To use the existing CA cert bundle:

	# cat conf/ssl.ca/ca.crt >> conf/ssl.crt/ca-bundle.crt


C. Modify Your Apache Config file:

Add the following lines (or modify the existing directives) from your 
httpd.conf file inside the VirtualHost section (see the end of this document
for an example VirtualHost section for NicToolServer):

	SSLCertificateFile /usr/local/apache/conf/ssl.crt/server.crt
	SSLCertificateKeyFile /usr/local/apache/conf/ssl.key/server.key
	SSLCACertificateFile /usr/local/apache/conf/ssl.crt/<bundle-file>.crt
	SSLVerifyClient require
optional:
	SSLVerifyDepth 1

These tell apache where your server's certificate and key files are, and the 
bundle file for the CA certificates for client authentication (substitute the 
correct name for the bundle file).
The SSLVerifyDepth number is how high to search the chain of CA certificates 
to find onethat is trusted.  This is optional since by default it is 1.
If you have a CA that is signed by a higher-level CA (such as within
your corporation, or by Thawte or VeriSign), you may want this to be higher, 
like 10.  

If you have your own self-signed CA certificate you can leave this at 1.


D. Verify your client authentication works.

Restart apache and try to view your https://server:port/ page.  If we set it 
all up correctly, you will be denied access to the port for the virtualhost 
you just configured because "Security failure.  Personal certificate required"
or similar reason.

try to access the same page using your client's key and certificate:

	# openssl s_client -connect <host>:<port> -cert client.crt \
		-key client.key 

If the connection fails, examine the error messages and try to determine the 
reason.

If successful, you should see something like:
.
.
.
SSL handshake has read 2249 bytes and written 1057 bytes
---
New, TLSv1/SSLv3, Cipher is EDH-RSA-DES-CBC3-SHA
Server public key is 1024 bit
SSL-Session:
    Protocol  : TLSv1
    Cipher    : EDH-RSA-DES-CBC3-SHA
    Session-ID: D79A8A7ABAC4A6D1A1360D9B985D01F37ECB8F691960B163FCC48BE0629B6CEC
    Session-ID-ctx: 
    Master-Key: 33FF2CFF25A9D8BB61089A0E332D9923F82C39C81E2D7BFFFE3993D20D5FD...
    Key-Arg   : None
    Start Time: 994986465
    Timeout   : 300 (sec)
    Verify return code: 0 (ok)
---
Type "GET / HTTP/1.0" followed by two carriage-returns.
You should see the HTML for your page. (or for NicToolServer you will
see some XML saying something like "your session expired").

For NicToolServer, your VirtualHost section may look like this:

<ifDefine SSL>
<VirtualHost _default_:8043>
KeepAlive Off
PerlRequire "/usr/local/apache/conf/nictoolserver.conf"
ErrorLog /usr/local/apache/logs/nictoolserver/error_log
CustomLog /usr/local/apache/logs/nictoolserver/access_log common
SSLEngine on
SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
SSLCertificateFile /usr/local/apache/conf/ssl.crt/sample.com.crt
SSLCertificateKeyFile /usr/local/apache/conf/ssl.key/sample.com.key
SSLCACertificateFile /usr/local/apache/conf/ssl.crt/ca-bundle-sample.com.crt
SSLVerifyClient require
SSLVerifyDepth 1

<Location />
SetHandler perl-script
PerlResponseHandler NicToolServer
</Location>
</VirtualHost>
</ifDefine>

